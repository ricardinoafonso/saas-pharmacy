// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model company {
  id        Int         @id @default(autoincrement())
  name      String
  email     String
  telefone  String
  endereco  String
  nif       String
  User      User?       @relation(fields: [userId], references: [id])
  userId    Int?
  employe   employees[]
  custumer  custumers[]
  product   product[]
  sales     sales[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())

  @@map("companys")
}

model plans {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  limit        limit[]
  subscription subscription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())

  @@map("plans")
}

model limit {
  id             Int      @id @default(autoincrement())
  company_number Int
  employees      Int
  plans          plans?   @relation(fields: [plansId], references: [id])
  plansId        Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@map("limits")
}

model subscription {
  id        Int      @id @default(autoincrement())
  plans     plans?   @relation(fields: [plansId], references: [id])
  plansId   Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  status    Boolean
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model key {
  id        Int      @id @default(autoincrement())
  hash      String
  status    Boolean
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("keys")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String?
  username     String?        @unique
  email        String?        @unique
  password     String?
  endereco     String?
  status       Boolean?       @default(false)
  features     String[]
  company      company[]
  key          key[]
  subscription subscription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  tokens       tokens[]

  @@map("users")
}

model employees {
  id        Int       @id @default(autoincrement())
  name      String
  username  String
  email     String
  password  String
  address   String
  company   company?  @relation(fields: [companyId], references: [id])
  companyId Int?
  sales     sales[]
  features  String[]
  sessions  session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  tokens    tokens[]

  @@map("employees")
}

model categorie {
  id      Int       @id @default(autoincrement())
  name    String
  product product[]
  @@map("categories")
}

model product {
  id           Int         @id @default(autoincrement())
  name         String
  price        Float
  quantity     Int
  localization String
  iva          Float
  priceBuy     Float
  discount     Float
  code         Int
  categorie    categorie?  @relation(fields: [categorieId], references: [id])
  categorieId  Int?
  salesItem    salesItem[]
  company      company?    @relation(fields: [companyId], references: [id])
  companyId    Int?
  @@map("product")
}

model sales {
  id          Int         @id @default(autoincrement())
  total       Float
  paymentType String[]
  salesItem   salesItem[]
  employees     employees?  @relation(fields: [employeeId], references: [id])
  employeeId  Int?
  company     company?    @relation(fields: [companyId], references: [id])
  companyId   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@map("sales")
}

model salesItem {
  id        Int      @id @default(autoincrement())
  sales     sales?   @relation(fields: [salesId], references: [id])
  salesId   Int?
  quantity  Int
  product   product? @relation(fields: [productId], references: [id])
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@map("salesItems")
}

model session {
  id        Int        @id @default(autoincrement())
  data      DateTime
  ip        String
  refer     String
  userAgent String
  employees   employees? @relation(fields: [employeeId], references: [id])
  employeeId Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  @@map("sessions")
}

model custumers {
  id        Int      @id @default(autoincrement())
  name      String
  nif       String
  endereco  String
  data      DateTime
  company   company? @relation(fields: [companyId], references: [id])
  companyId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("custumers")
}

model tokens {
  id          String    @id @default(uuid())
  employees   employees? @relation(fields: [employeesId], references: [id])
  employeesId Int?
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  expires     DateTime?
  token       String?
  token_type        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}
